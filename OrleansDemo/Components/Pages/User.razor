@page "/user"
@using Abstraction.Models
@using OrleansDemo.Models
@using OrleansDemo.Services.Interfaces
@rendermode InteractiveServer

<PageTitle>User</PageTitle>
<p role="status">Current count: @users.Count</p>
<input @bind="FirstName" aria-label="first name"></input>
<button class="btn btn-primary" @onclick="AddUser">Add</button>

<table>
    <tr>
        <th>first name</th>
        <th>last name</th>
        <th>address</th>
    </tr>
    @foreach (var user in users)
    {

            <tr>
                <td>@user.FirstName</td>
                <td>@user.LastName</td>
                <td>@user.Address</td>
                <td>
                    <button class="btn btn-primary" onclick="@(DeleteUser(user.Id))">Delete</button>
                </td>
            </tr>
    }
</table>
@code {
    [Inject] IUserService _userService { get; set; }
    private Guid UsersId { get; set; } = Guid.Empty;
    private string FirstName { get; set; }
    private Abstraction.Models.User user = new Abstraction.Models.User();
    private List<Abstraction.Models.User> users = new List<Abstraction.Models.User>();
    private async Task AddUser()
    {
        var id = Guid.NewGuid();
        await _userService.AddUser(new UserModel
        {
            Id = id,
            FirstName = FirstName,
            LastName = "bombom",
            Address = "anis.bouzidi@horizon-tech.tn"
        }, UsersId);

        user = await _userService.GetUser(id);
        users = await _userService.GetUsers(UsersId);
        Console.WriteLine(UsersId);
        StateHasChanged();

    }

    private async Task DeleteUser(Guid id )
    {
        try
        {
            await _userService.DeleteUser(id, UsersId);
            users = await _userService.GetUsers(UsersId);
            Console.WriteLine(users.Count);
        }
        catch (Exception ex)
        {
            Console.WriteLine(ex.Message);
        }
    }

}